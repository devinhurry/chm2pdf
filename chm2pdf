#!/usr/bin/python
'''
CHM2PDF v. 0.9.1
http://code.google.com/p/chm2pdf

A script that converts a CHM compiled HTML file into a single PDF file.
(c) 2007 Massimo Sandal
(c) 2007 Chris Karakas <http://www.karakas-online.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import chm.chm as chm
import sys
import os, os.path
import re, glob
import getopt
import chardet
from html.parser import HTMLParser
# from BeautifulSoup import BeautifulSoup

global version

global CHM2PDF_TEMP_WORK_DIR #where conversions etc. take place
global CHM2PDF_TEMP_ORIG_DIR #where the chm file is exploded
global CHM2PDF_WORK_DIR
global CHM2PDF_ORIG_DIR

global filename #the input filename

version = '0.9.1'
CHM2PDF_TEMP_WORK_DIR='/tmp/chm2pdf/work' 
CHM2PDF_TEMP_ORIG_DIR='/tmp/chm2pdf/orig'



# YOU DON'T NEED TO CHANGE ANYTHING BELOW THIS LINE!

class PageLister(HTMLParser):
    '''
    Parser of the CHM file's GetTopicsTree() method that retrieves the URL of the HTML
    page embedded in the CHM file.
    '''
    def __init__(self):
        super().__init__()
        self.pages = []

    def handle_starttag(self, tag, attrs):
        if tag == 'param':
            attrs = dict(attrs)
            if attrs.get('name') == 'Local':
                self.pages.append('/' + attrs['value'])

def get_html_list(cfile):
    '''
    retrieves the list of HTML files contained into the CHM file, **in order** (that's the important bit).
    (actually performed by the PageLister class)
    '''
    topicstree=cfile.GetTopicsTree()
    if isinstance(topicstree, bytes):
        pass
        # 使用 chardet 检测编码
        detected_encoding = chardet.detect(topicstree)['encoding']

        print(detected_encoding)
        # 解码二进制数据
        if detected_encoding:
            topicstree = topicstree.decode(detected_encoding)
        else:
            # 如果 chardet 无法确定编码，可以尝试使用一个默认编码，如 'utf-8'
            topicstree = topicstree.decode('utf-8', 'ignore')  # 'ignore' 会忽略无法解码的字符
    lister=PageLister()
    lister.feed(topicstree)
    #print('lister pages'),lister.pages
    return lister.pages


import os

def checkmkdir(directory):
    """检查目录是否存在，如果不存在，则创建它。

    Args:
        directory (str): 要检查和创建的目录路径。
    """
    if not os.path.exists(directory):
        os.mkdir(directory)

import chardet
import os

def conv_encoding(files):
    encoding_set = set()

    # 检测前 10 个文件的编码
    for file_path in files[:10]:
        with open(file_path, 'rb') as f:
            raw_data = f.read()
            encoding = chardet.detect(raw_data)['encoding']
            if encoding:
                encoding_set.add(encoding.lower())

    # 如果前 10 个文件有相同的编码，则进行转换
    if len(encoding_set) == 1:
        encoding_to_use = encoding_set.pop()
        if encoding_to_use != 'utf-8':
            for file_path in files:
                try:
                    with open(file_path, 'r', encoding=encoding_to_use) as f:
                        file_content = f.read()
                    # 将内容转换为 UTF-8 并覆盖原文件
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(file_content)
                except Exception as e:
                    print(f'error when read {file_path} {e}')



def convert_to_pdf(cfile, filename, outputfilename):
    '''
    Performs actual converting.
    '''

    # Extract the files from the CHM archive and correct them ONLY IF '--dontextract' was NOT given!
    # ########################### File extraction and correction: START ############################
    #
    checkmkdir(CHM2PDF_TEMP_WORK_DIR)
    checkmkdir(CHM2PDF_TEMP_ORIG_DIR)
    checkmkdir(CHM2PDF_ORIG_DIR)
    checkmkdir(CHM2PDF_WORK_DIR)
    # Compute filenames and lists. This is needed no matter if '--dontextract' was given or not!
     
    html_list=get_html_list(cfile)
    html_list = [CHM2PDF_ORIG_DIR + name for name in html_list]
    
    #conv_encoding(html_list)
    html_files_str = "' '".join(html_list)
    html_files_str = f"'{html_files_str}'"
          
    #if options['verbose']=='--verbose' and options['verbositylevel']=='high':
    cmd = f"wkhtmltopdf --page-size A4 --enable-local-file-access  --load-error-handling ignore {html_files_str} '{outputfilename}' > /dev/null" 
    #print(cmd)

    # 当前目录的路径
    current_directory = os.getcwd()

    # 文件的绝对路径
    file_path = os.path.join(current_directory, 'tmp.bash')

    # 将命令写入文件
    with open(file_path, 'w') as file:
        file.write(cmd)

    exit_value=os.system(f'bash "{file_path}"')

    if exit_value != 0:
        print('Something wrong happened when launching wkhtmltopdf.')
        print('exit value: ',exit_value)
        print('Check if output exists or if it is good.')
    else: 
        print('Written file ' + outputfilename)
    print('Done.')

def usage (name):
    print('Usage:')
    print("\t%s [options] input_filename [output_filename]" % name)

def split(path):
    if path[-1] == os.sep :
        path, fname = path[:-1], ''
    else:
        path, fname = os.path.split( path )
        fname, ext = os.path.splitext( fname )
    return ( path, fname, ext[1:] )



def main(argv):

    global CHM2PDF_WORK_DIR
    global CHM2PDF_ORIG_DIR

    # Option validation checks
    #
    if len(argv)==1:
        usage(sys.argv[0])
        return
    elif len(argv)==2:
        filename = argv[1]
        dirname, basename, suffix = split(filename)
        if dirname:
            outputfilename = dirname + os.sep + basename +'.pdf'
        else:
            outputfilename = dirname + basename +'.pdf'
        # print('outputfilename = ') + outputfilename

    elif len(argv)==2:
        filename = argv[1]
        dirname, basename, suffix = split(filename)
        outputfilename = argv[2]
        # print('outputfilename = ') + outputfilename
    else:
        usage(sys.argv[0])
        return
 
    CHM2PDF_WORK_DIR = CHM2PDF_TEMP_WORK_DIR + os.sep + basename
    CHM2PDF_ORIG_DIR = CHM2PDF_TEMP_ORIG_DIR + os.sep + basename

    if not os.path.exists(filename):
        print('CHM file "' + filename + '" not found!')
        return
    
    #remove temporary files
    print('Removing any previous temporary files...')
    os.system('rm -r "'+CHM2PDF_ORIG_DIR+'/*"')
    os.system('rm -r "'+CHM2PDF_WORK_DIR+'/*"')
    
    cfile = chm.CHMFile()
    cfile.LoadCHM(filename)

    os.system(f'extract_chmLib "{filename}" "{CHM2PDF_ORIG_DIR}" &> /dev/null')
    convert_to_pdf(cfile, filename, outputfilename)


if __name__ == '__main__':
    main(sys.argv)
    
